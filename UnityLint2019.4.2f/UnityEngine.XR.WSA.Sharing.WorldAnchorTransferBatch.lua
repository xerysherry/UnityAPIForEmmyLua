--- @class UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch A batch of WorldAnchors which can be exported and imported between apps.
--- @field anchorCount number property get
---       (Read Only) Gets the number of world anchors in this WorldAnchorTransferBatch.
UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch = {}

--- Exports the input WorldAnchorTransferBatch into a byte array which can be passed to WorldAnchorTransferBatch.ImportAsync to restore the original WorldAnchorTransferBatch.
--- @param transferBatch UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch The WorldAnchorTransferBatch to export into a byte buffer.
--- @param onDataAvailable function The callback when some data is available.
--- @param onCompleted function The callback after the last bit of data was provided via onDataAvailable with a completion reason (success or failure reason).
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch.ExportAsync(transferBatch, onDataAvailable, onCompleted) end

--- Imports the provided bytes into a WorldAnchorTransferBatch.
--- @param serializedData number[] 
--- @param onComplete function 
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch.ImportAsync(serializedData, onComplete) end

--- Imports the provided bytes into a WorldAnchorTransferBatch.
--- @param serializedData number[] 
--- @param offset number 
--- @param length number 
--- @param onComplete function 
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch.ImportAsync(serializedData, offset, length, onComplete) end

--- Adds a WorldAnchor to the batch with the specified identifier.
--- @param id string The identifier associated with this anchor in the batch. This must be unique per batch.
--- @param anchor UnityEngine.XR.WSA.WorldAnchor The anchor to add to the batch.
--- @return boolean Whether or not the anchor was added successfully.
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch:AddWorldAnchor(id, anchor) end

--- Gets all of the identifiers currently mapped in this WorldAnchorTransferBatch. If the target array is not large enough to contain all the identifiers, then only those identifiers that fit within the array will be stored and the return value will equal the size of the array. You can detect this condition by checking for a return value less than WorldAnchorTransferBatch.anchorCount.
--- @param ids string[] A target array to receive the identifiers of the currently mapped world anchors.
--- @return number The number of identifiers stored in the target array.
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch:GetAllIds(ids) end

--- Gets all of the identifiers currently mapped in this WorldAnchorTransferBatch.
--- @return string[] The identifiers of all of the WorldAnchors in this WorldAnchorTransferBatch.
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch:GetAllIds() end

--- Locks the provided GameObject to the world by loading and applying the WorldAnchor from the TransferBatch for the provided id.
--- @param id string The identifier for the WorldAnchor to load and apply to the GameObject.
--- @param go UnityEngine.GameObject The GameObject to apply the WorldAnchor to. If the GameObject already has a WorldAnchor, it will be updated.
--- @return UnityEngine.XR.WSA.WorldAnchor The loaded WorldAnchor or null if the id does not map to a WorldAnchor.
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch:LockObject(id, go) end

--- Cleans up the WorldAnchorTransferBatch and releases memory.
function UnityEngine.XR.WSA.Sharing.WorldAnchorTransferBatch:Dispose() end

---  Generated By xerysherry