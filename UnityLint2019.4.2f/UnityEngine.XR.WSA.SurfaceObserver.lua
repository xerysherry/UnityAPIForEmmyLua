--- @class UnityEngine.XR.WSA.SurfaceObserver SurfaceObserver is the main API portal for spatial mapping functionality in Unity.
UnityEngine.XR.WSA.SurfaceObserver = {}

--- Call Dispose when the SurfaceObserver is no longer needed.  This will ensure that the object is cleaned up appropriately but will not affect any Meshes, components, or objects returned by RequestMeshAsync.
function UnityEngine.XR.WSA.SurfaceObserver:Dispose() end

--- This method sets the observation volume as an axis aligned box at the requested location.  Successive calls can be used to reshape the observation volume and/or to move it in the Scene as needed.  Extents are the distance from the center of the box to its edges along each axis.
--- @param origin UnityEngine.Vector3 The origin of the requested observation volume.
--- @param extents UnityEngine.Vector3 The extents in meters of the requested observation volume.
function UnityEngine.XR.WSA.SurfaceObserver:SetVolumeAsAxisAlignedBox(origin, extents) end

--- This method sets the observation volume as a sphere at the requested location.  Successive calls can be used to reshape the observation volume and/or to move it in the Scene as needed.
--- @param origin UnityEngine.Vector3 The origin of the requested observation volume.
--- @param radiusMeters number The radius in meters of the requested observation volume.
function UnityEngine.XR.WSA.SurfaceObserver:SetVolumeAsSphere(origin, radiusMeters) end

--- This method sets the observation volume as an oriented box at the requested location.  Successive calls can be used to reshape the observation volume and/or to move it in the Scene as needed.  Extents are the distance from the center of the box to its edges along each axis.
--- @param origin UnityEngine.Vector3 The origin of the requested observation volume.
--- @param extents UnityEngine.Vector3 The extents in meters of the requested observation volume.
--- @param orientation UnityEngine.Quaternion The orientation of the requested observation volume.
function UnityEngine.XR.WSA.SurfaceObserver:SetVolumeAsOrientedBox(origin, extents, orientation) end

--- This method sets the observation volume as a frustum at the requested location.  Successive calls can be used to reshape the observation volume and/or to move it in the Scene as needed.
--- @param planes UnityEngine.Plane[] Planes defining the frustum as returned from GeometryUtility.CalculateFrustumPlanes.
function UnityEngine.XR.WSA.SurfaceObserver:SetVolumeAsFrustum(planes) end

--- Update generates SurfaceChanged events which are propagated through the specified callback.  If no callback is specified, the system will throw an ArgumentNullException.  Generated callbacks are synchronous with this call.  Scenes containing multiple SurfaceObservers should consider using different callbacks so that events can be properly routed.
--- @param onSurfaceChanged function Callback called when SurfaceChanged events are detected.
function UnityEngine.XR.WSA.SurfaceObserver:Update(onSurfaceChanged) end

--- Call RequestMeshAsync to start the process of baking mesh data for the specified surface.  This data may take several frames to create.  Baked data will be delivered through the specified SurfaceDataReadyDelegate.  This method will throw ArgumentNullExcpetion and ArgumentException if parameters specified in the dataRequest are invalid.
--- @param dataRequest UnityEngine.XR.WSA.SurfaceData Bundle of request data used to bake the specified surface.
--- @param onDataReady function Callback called when the baking of this surface is complete.
--- @return boolean Returns false if the request has failed, typically due to specifying a bad surface ID.
function UnityEngine.XR.WSA.SurfaceObserver:RequestMeshAsync(dataRequest, onDataReady) end

---  Generated By xerysherry