--- @class Unity.IO.LowLevel.Unsafe.AsyncReadManager With the AsyncReadManager, you can perform asynchronous I/O operations through Unity's virtual file system. You can perform these operations on any thread or job.
Unity.IO.LowLevel.Unsafe.AsyncReadManager = {}

--- Issues an asynchronous file read operation. Returns a ReadHandle.
--- @param filename string The filename to read from.
--- @param readCmds Unity.IO.LowLevel.Unsafe.ReadCommand* A pointer to an array of ReadCommand structs that specify offset, size, and destination buffer.
--- @param readCmdCount number The number of read commands pointed to by readCmds.
--- @param assetName string (Optional) The name of the object being read, for metrics purposes.
--- @param typeID number (Optional) The of the object being read, for metrics purposes.
--- @param subsystem Unity.IO.LowLevel.Unsafe.AssetLoadingSubsystem (Optional) The AssetLoadingSubsystem|Subsystem tag for the read operation, for metrics purposes.
--- @return Unity.IO.LowLevel.Unsafe.ReadHandle Used to monitor the progress and status of the read command.
function Unity.IO.LowLevel.Unsafe.AsyncReadManager.Read(filename, readCmds, readCmdCount, assetName, typeID, subsystem) end

--- Gets information about a file.
--- @param filename string The name of the file to query.
--- @param result Unity.IO.LowLevel.Unsafe.FileInfoResult* A struct that this function fills in with information about the file upon completion of this asynchronous request.
--- @return Unity.IO.LowLevel.Unsafe.ReadHandle A read handle that you can use to monitor the progress and status of this GetFileInfo command.
function Unity.IO.LowLevel.Unsafe.AsyncReadManager.GetFileInfo(filename, result) end

--- Queues a set of read operations for a file once the specified Jobs have completed.
--- @param fileHandle Unity.IO.LowLevel.Unsafe.FileHandle& The FileHandle to be read from, opened by AsyncReadManager.OpenFileAsync.
--- @param readCmdArray Unity.IO.LowLevel.Unsafe.ReadCommandArray* A pointer to a struct containing the read commands to queue.
--- @param dependency Unity.Jobs.JobHandle The dependency that will trigger the read to begin.
--- @return Unity.IO.LowLevel.Unsafe.ReadHandle A ReadHandle object you can to use to check the status and monitor the progress of the read operations.
function Unity.IO.LowLevel.Unsafe.AsyncReadManager.ReadDeferred(fileHandle, readCmdArray, dependency) end

--- Queues a set of read operations for a file opened with OpenFileAsync.
--- @param fileHandle Unity.IO.LowLevel.Unsafe.FileHandle& The FileHandle to be read from, opened by AsyncReadManager.OpenFileAsync.
--- @param readCmdArray Unity.IO.LowLevel.Unsafe.ReadCommandArray A struct containing the read commands to queue.
--- @return Unity.IO.LowLevel.Unsafe.ReadHandle A ReadHandle object you can use to check the status and monitor the progress of the read operations.
function Unity.IO.LowLevel.Unsafe.AsyncReadManager.Read(fileHandle, readCmdArray) end

--- Opens the file asynchronously.
--- @param fileName string The path to the file to be opened.
--- @return Unity.IO.LowLevel.Unsafe.FileHandle The FileHandle of the file being opened. Use the FileHandle to check the status of the open operation, to read the file, and to close the file when done.
function Unity.IO.LowLevel.Unsafe.AsyncReadManager.OpenFileAsync(fileName) end

--- Closes a file held open internally by the AsyncReadManager.
--- @param fileName string The path to the file to close.
--- @param dependency Unity.Jobs.JobHandle (Optional) A JobHandle to wait on before performing the close.
--- @return Unity.Jobs.JobHandle A JobHandle that completes when the asynchronous close operation finishes.
function Unity.IO.LowLevel.Unsafe.AsyncReadManager.CloseCachedFileAsync(fileName, dependency) end

---  Generated By xerysherry