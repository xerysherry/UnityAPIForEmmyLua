--- @class Unity.Jobs.JobHandle JobHandle.
--- @field IsCompleted boolean property get
---       Returns false if the task is currently running. Returns true if the task has completed.
Unity.Jobs.JobHandle = {}

--- Ensures that all jobs have completed.
function Unity.Jobs.JobHandle.CompleteAll(job0, job1) end

--- Ensures that all jobs have completed.
function Unity.Jobs.JobHandle.CompleteAll(job0, job1, job2) end

--- Ensures that all jobs have completed.
function Unity.Jobs.JobHandle.CompleteAll(jobs) end

--- By default jobs are only put on a local queue when using Job Schedule functions, this actually makes them available to the worker threads to execute them.
function Unity.Jobs.JobHandle.ScheduleBatchedJobs() end

--- Combines multiple dependencies into a single one.
--- @return Unity.Jobs.JobHandle 
function Unity.Jobs.JobHandle.CombineDependencies(job0, job1) end

--- Combines multiple dependencies into a single one.
--- @return Unity.Jobs.JobHandle 
function Unity.Jobs.JobHandle.CombineDependencies(job0, job1, job2) end

--- Combines multiple dependencies into a single one.
--- @return Unity.Jobs.JobHandle 
function Unity.Jobs.JobHandle.CombineDependencies(jobs) end

--- Combines multiple dependencies into a single one.
--- @return Unity.Jobs.JobHandle 
function Unity.Jobs.JobHandle.CombineDependencies(jobs) end

--- CheckFenceIsDependencyOrDidSyncFence.
--- @param jobHandle Unity.Jobs.JobHandle Job handle.
--- @param dependsOn Unity.Jobs.JobHandle Job handle dependency.
--- @return boolean Return value.
function Unity.Jobs.JobHandle.CheckFenceIsDependencyOrDidSyncFence(jobHandle, dependsOn) end

--- Ensures that the job has completed.
function Unity.Jobs.JobHandle:Complete() end

---  Generated By xerysherry